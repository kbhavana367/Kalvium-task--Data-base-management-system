{
  "course_name": "Data model and relational data base",
  "course_outcomes": "The primary objective of this course is to provide a deep understanding of data structures and algorithms, focusing on their practical application to solve real-world problems. Throughout the course, you will explore various data structures and algorithmic techniques, learning how to implement and apply them effectively in different scenarios. By the end of the course, you will have a comprehensive understanding of problem-solving strategies, enabling you to approach complex problems with confidence and efficiency. You will also gain hands-on experience in utilizing data structures and algorithms to optimize solutions for real-world challenges.",
  "current_module_name": "Basic sql queries",
  "current_module_description": "In this module, you will learn the concept of recursion and how to apply this technique to solve problems in SQL queries. .",
  "current_module_lesson_count": "3",
  "current_module_lesson_index": "1",
  "previous_module_name_with_description": " Entity-Relationship (ER) Design, which is crucial for effectively modeling and structuring databases. You will explore how to identify entities, define relationships, and establish attributes to create a clear and efficient database schema. By the end of this module, you will have a strong understanding of how to apply ER design principles to visualize and implement real-world data models.",
  "previous_whole_lessons_in_current_module": " Entity-Relationship (ER) Design, which is crucial for effectively modeling and structuring databases. You will explore how to identify entities, define relationships, and establish attributes to create a clear and efficient database schema. By the end of this module, you will have a strong understanding of how to apply ER design principles to visualize and implement real-world data models.",
  "instruction_designer_input": "The lesson explain topic mentioned in {LESSON REQUIREMENTS} is designed using the ADDIE framework and Gagne's Nine Events Of Instruction. The concepts mentioned in the lessons should have a contiuity by Maintaining a flow and smooth transitions between concepts. In the Analysis phase, we identified that learners have been introduced to the basics of {concepts explained in The previous lesson(s) in this module covered} and provide a hook at the begining with remembering what the reader have learned in the previous lesson. This lesson targets students familiar with {concept present in the Previous Module and previous lessons}. Whatever mentioned above should blend with the lesson contents it should not be explicitly Shown with the headings or the titles.",
  "time_to_read": "20 mins",
  "lu_description": "Understanding SQl and solving the real time queries",
  "learner_journey": "The learner will understand the concept of sql basics and joins",
  "created_lesson": "Ever wondered how websites remember your preferences, or how online stores keep track of their inventory? It all boils down to databases and the language we use to talk to them: SQL. Remember the Entity-Relationship (ER) diagrams we explored? Now, let's translate those diagrams into a working database.\n\n## Learning Objectives\n\nIn this lesson, you'll learn:\n\n*   The basic syntax of **SQL (Structured Query Language)**, the standard language for interacting with databases.\n*   How to use **SQL queries** to retrieve, insert, update, and delete data.\n*   How to use **Joins** to combine data from multiple tables.\n*   Practical examples of SQL queries to solve common data retrieval problems.\n\n---\n\nLet’s say you have a massive collection of books. SQL is like the librarian who knows exactly how to find, add, or update information about those books quickly and efficiently. It’s the key to unlocking the power of data.\n\n### Introduction to SQL\n\n**SQL (Structured Query Language)** is the standard language for managing and manipulating data in relational database management systems (**RDBMS**). Think of it as the universal language that databases understand, allowing you to create, modify, and query data.\n\n**Why SQL?**\n\n*   **Standard:** It's the industry standard, supported by almost all **RDBMS**, like MySQL, PostgreSQL, Oracle, and SQL Server.\n*   **Powerful:** SQL can handle complex data manipulations and retrieval tasks.\n*   **Easy to Learn:** The basic syntax is relatively straightforward and human-readable.\n\n### Basic SQL Syntax\n\nSQL commands are instructions you give to the database. The most common commands fall into these categories:\n\n*   **SELECT:** Retrieves data from one or more tables.\n*   **INSERT:** Adds new data into a table.\n*   **UPDATE:** Modifies existing data in a table.\n*   **DELETE:** Removes data from a table.\n\nLet’s start with the SELECT statement. Imagine you want to find all the books written by a specific author. You’d use a SELECT statement.\n\n**SELECT Statement**\n\nThe `SELECT` statement is used to retrieve data from a database. Here's the basic syntax:\n\n```sql\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n```\n\n*   `SELECT column1, column2, ...`: Specifies the columns you want to retrieve. Use `*` to select all columns.\n*   `FROM table_name`: Specifies the table from which you want to retrieve data.\n*   `WHERE condition`: Filters the data based on a specified condition (optional).\n\n**Example:**\n\nLet's say you have a table named `Customers` with columns like `CustomerID`, `Name`, and `City`. To retrieve the names of all customers from New York, you’d use the following query:\n\n```sql\nSELECT Name\nFROM Customers\nWHERE City = 'New York';\n```\n\nThis query tells the database: \"Give me the `Name` from the `Customers` table where the `City` is 'New York'.\"\n\n### INSERT Statement\n\nImagine adding a new book to your library. That's what the INSERT statement does – it adds new rows of data into a table.\n\n```sql\nINSERT INTO table_name (column1, column2, ...)\nVALUES (value1, value2, ...);\n```\n\n*   `INSERT INTO table_name`: Specifies the table into which you want to insert data.\n*   `(column1, column2, ...)`: Specifies the columns you want to populate.\n*   `VALUES (value1, value2, ...)`: Specifies the values you want to insert into the corresponding columns.\n\n**Example:**\n\nTo add a new customer named \"Jane Doe\" from Chicago to the `Customers` table, you’d use the following query:\n\n```sql\nINSERT INTO Customers (Name, City)\nVALUES ('Jane Doe', 'Chicago');\n```\n\nThis query tells the database: \"Insert a new row into the `Customers` table with the `Name` as 'Jane Doe' and the `City` as 'Chicago'.\"\n\n### UPDATE Statement\n\nSometimes, you need to correct or update information. The UPDATE statement lets you modify existing data in a table.\n\n```sql\nUPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;\n```\n\n*   `UPDATE table_name`: Specifies the table you want to update.\n*   `SET column1 = value1, column2 = value2, ...`: Specifies the columns you want to modify and their new values.\n*   `WHERE condition`: Filters the rows you want to update based on a condition (optional, but highly recommended to avoid updating all rows).\n\n**Example:**\n\nTo update the city of customer with `CustomerID` 123 to \"Los Angeles\" in the `Customers` table, you'd use:\n\n```sql\nUPDATE Customers\nSET City = 'Los Angeles'\nWHERE CustomerID = 123;\n```\n\nThis query tells the database: \"In the `Customers` table, change the `City` to 'Los Angeles' for the row where the `CustomerID` is 123.\"\n\n### DELETE Statement\n\nFinally, if you need to remove data, the DELETE statement is your tool.\n\n```sql\nDELETE FROM table_name\nWHERE condition;\n```\n\n*   `DELETE FROM table_name`: Specifies the table from which you want to delete data.\n*   `WHERE condition`: Filters the rows you want to delete based on a condition (optional, but crucial to prevent accidental deletion of all rows).\n\n**Example:**\n\nTo delete the customer with `CustomerID` 123 from the `Customers` table, you’d use:\n\n```sql\nDELETE FROM Customers\nWHERE CustomerID = 123;\n```\n\nThis query tells the database: \"Remove the row from the `Customers` table where the `CustomerID` is 123.\"\n\n---\n\nNow, let's imagine you have two separate bookshelves, one with customer information and another with order details. How do you connect a customer to their orders? This is where **joins** come in!\n\n### Joins: Combining Data from Multiple Tables\n\n**Joins** are used to combine rows from two or more tables based on a related column. This is crucial when your data is spread across multiple tables. There are several types of joins, but let's focus on the most common one: the INNER JOIN.\n\n**INNER JOIN**\n\nAn `INNER JOIN` returns only the rows that have matching values in both tables. Think of it as finding the intersection between two sets.\n\n```sql\nSELECT column1, column2, ...\nFROM table1\nINNER JOIN table2\nON table1.common_column = table2.common_column;\n```\n\n*   `FROM table1 INNER JOIN table2`: Specifies the tables you want to join.\n*   `ON table1.common_column = table2.common_column`: Specifies the column(s) that the tables have in common and uses to match rows.\n\n**Example:**\n\nLet's say you have two tables: `Customers` (with columns `CustomerID`, `Name`) and `Orders` (with columns `OrderID`, `CustomerID`, `OrderDate`). To retrieve the names of customers along with their order dates, you’d use the following query:\n\n```sql\nSELECT Customers.Name, Orders.OrderDate\nFROM Customers\nINNER JOIN Orders\nON Customers.CustomerID = Orders.CustomerID;\n```\n\nThis query tells the database: \"Combine the `Customers` and `Orders` tables where the `CustomerID` in both tables matches. Then, give me the `Name` from the `Customers` table and the `OrderDate` from the `Orders` table.\"\n\nThis is how you can retrieve related data from multiple tables, providing a more complete view of your information.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0OQJDd3QqQM?start=25&end=130\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n---\n\n### Real-World Examples\n\n1.  **E-commerce:** Retrieving customer order history\n\n    Let’s consider an e-commerce platform where you need to retrieve a customer's order history. Using the `Customers` and `Orders` tables, you can use an `INNER JOIN` to combine customer information with their corresponding orders.\n\n    ```sql\n    SELECT Customers.Name, Orders.OrderID, Orders.OrderDate\n    FROM Customers\n    INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID\n    WHERE Customers.CustomerID = 456;\n    ```\n\n    This query efficiently retrieves the customer’s name, order ID, and order date for customer ID 456.\n\n2.  **Social Media:** Retrieving user posts\n\n    In a social media application, you might have tables for `Users` and `Posts`. To get all the posts made by a specific user, you can use a similar `INNER JOIN` query:\n\n    ```sql\n    SELECT Users.Username, Posts.PostContent, Posts.PostDate\n    FROM Users\n    INNER JOIN Posts ON Users.UserID = Posts.UserID\n    WHERE Users.UserID = 789;\n    ```\n\n    This query retrieves the username, post content, and post date for all posts made by user ID 789.\n\n### Summary\n\nIn this lesson, you've learned the fundamental **SQL** commands (`SELECT`, `INSERT`, `UPDATE`, `DELETE`) and how to use **joins** to combine data from multiple tables. These are essential skills for anyone working with databases.\n\nAdditional Resources for you:\n\n*   [https://youtu.be/0OQJDd3QqQM?feature=shared](https://youtu.be/0OQJDd3QqQM?feature=shared)\n\nNow that you understand the basics of SQL, how would you use these skills to solve a more complex data retrieval problem, such as finding the top-selling products in a specific category?\n",
  "research_links_docs": [
    "https://youtu.be/0OQJDd3QqQM?feature=shared"
  ],
  "images_links": [],
  "additional_lesson_specific_guidance": "Create a narrative way of basic sql queries till joins covering all concepts and solving sql query",
  "api_key": ""
}