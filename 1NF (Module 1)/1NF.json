{
  "course_name": "Data Base Management system",
  "course_outcomes": "This course will guide you through the fundamental concepts of database normalization, starting with First Normal Form (1NF), and how these principles are applied in designing efficient and well-structured relational databases. By the end of this course, you will understand how to organize data to reduce redundancy and improve data integrity in SQLite. You will gain practical experience in applying normalization techniques to real-world database scenarios, ensuring that your database design adheres to industry standards for optimal performance and scalability.",
  "current_module_name": "1NF (1st Normalization)",
  "current_module_description": "In this module, you will learn the concept of First Normal Form (1NF) and how to apply it to organize data in a relational database. You will understand how to eliminate repeating groups and ensure that each column contains atomic values, setting the foundation for effective database design",
  "current_module_lesson_count": "1",
  "current_module_lesson_index": "1",
  "previous_module_name_with_description": "NA",
  "previous_whole_lessons_in_current_module": "NA",
  "instruction_designer_input": "The lesson explain topic mentioned in {LESSON REQUIREMENTS} is designed using the ADDIE framework and Gagne's Nine Events Of Instruction. The concepts mentioned in the lessons should have a contiuity by Maintaining a flow and smooth transitions between concepts. In the Analysis phase, we identified that learners have been introduced to the basics of {concepts explained in The previous lesson(s) in this module covered} and provide a hook at the begining with remembering what the reader have learned in the previous lesson. This lesson targets students familiar with {concept present in the Previous Module and previous lessons}. Whatever mentioned above should blend with the lesson contents it should not be explicitly Shown with the headings or the titles.",
  "time_to_read": "20 mins",
  "lu_description": "Understanding 1NF and how to apply First Normal Form (1NF) to eliminate repeating groups.",
  "learner_journey": "By the end of this module, The learner will be able to apply 1NF to transform unorganized data into a well-structured and efficient database format.",
  "created_lesson": "Ever felt like your data is a messy room, with everything scattered around? Just like you organize your room to find things easily, databases need organizing too. This is where normalization comes in, and today, we're diving into the First Normal Form (1NF)!\n\nIn this lesson You'll learn:\n\n*  Understanding what normalization is and why it's crucial for database efficiency.\n*  Defining First Normal Form (1NF) and its core principles.\n*  Identifying repeating groups in unnormalized data.\n*  Applying 1NF to eliminate repeating groups and achieve atomic values.\n*  Writing SQLite code to transform data into 1NF.\n\n## What is Normalization and Why Do We Need It?\n\nThink of normalization as tidying up your digital data closet. It's the process of organizing data in a database to reduce **redundancy** (duplication) and improve **data integrity** (accuracy and consistency). Just like a well-organized closet makes it easier to find your favorite shirt, a normalized database makes it easier to retrieve and manage information.\n\nNormalization is essential because it helps:\n\n*   Minimize data redundancy: Reducing the amount of storage space required.\n*   Improve data integrity: Ensuring data is accurate and consistent.\n*   Simplify data modification: Making it easier to update and maintain the database.\n*   Enhance query performance: Speeding up data retrieval.\n\n## Understanding First Normal Form (1NF)\n\nImagine you have a contact list where you store multiple phone numbers in a single field. That's like putting multiple items in one box without any separation! First Normal Form (1NF) is the initial step in organizing this data. It sets a basic rule: each column in a table should contain only **atomic** values. An atomic value is indivisible; it cannot be further broken down.\n\n**Key Principles of 1NF**:\n\n*   **Eliminate Repeating Groups**: Ensure that there are no repeating groups of data within a table.\n*   **Atomic Values**: Each column should contain only atomic (indivisible) values.\n\n## Identifying Repeating Groups\n\nLet's consider a scenario: a table of students and their courses. Suppose you have a table named `Students` with columns like `StudentID`, `Name`, and `Courses`. If a student is enrolled in multiple courses, you might be tempted to store all course names in a single `Courses` column, separated by commas. This is a repeating group.\n\n**Example of Unnormalized Data**:\n\n| StudentID | Name    | Courses                  |\n| :-------- | :------ | :----------------------- |\n| 1         | John    | Math, Physics, Chemistry |\n| 2         | Alice   | Biology, History         |\n\nIn this case, the `Courses` column contains repeating groups (multiple courses) for each student. This violates 1NF.\n\n## Applying 1NF to Eliminate Repeating Groups\n\nTo normalize the above data into 1NF, we need to eliminate the repeating group. The strategy is to create a separate table for courses and link it to the `Students` table using a foreign key.\n\n**Steps to Apply 1NF**:\n\n1.  **Create a New Table for Courses**: Create a new table named `Courses` with columns `CourseID` and `CourseName`.\n2.  **Link Tables Using Foreign Key**: Add a new table named `StudentCourses` to link `Students` and `Courses` tables.\n\n**Normalized Data**:\n\n**Students Table**:\n\n| StudentID | Name    |\n| :-------- | :------ |\n| 1         | John    |\n| 2         | Alice   |\n\n**Courses Table**:\n\n| CourseID | CourseName |\n| :------- | :--------- |\n| 1        | Math       |\n| 2        | Physics    |\n| 3        | Chemistry  |\n| 4        | Biology    |\n| 5        | History    |\n\n**StudentCourses Table**:\n\n| StudentID | CourseID |\n| :-------- | :------- |\n| 1         | 1        |\n| 1         | 2        |\n| 1         | 3        |\n| 2         | 4        |\n| 2         | 5        |\n\nNow, each column contains only atomic values, and there are no repeating groups.\n\n## SQLite Code for 1NF Normalization\n\nLet's translate the above normalization steps into SQLite code.\n\n1.  **Create Students Table**:\n\n```sqlite\nCREATE TABLE Students (\n    StudentID INTEGER PRIMARY KEY,\n    Name TEXT\n);\n```\n\n2.  **Create Courses Table**:\n\n```sqlite\nCREATE TABLE Courses (\n    CourseID INTEGER PRIMARY KEY,\n    CourseName TEXT\n);\n```\n\n3.  **Create StudentCourses Table**:\n\n```sqlite\nCREATE TABLE StudentCourses (\n    StudentID INTEGER,\n    CourseID INTEGER,\n    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID),\n    PRIMARY KEY (StudentID, CourseID)\n);\n```\n\n4.  **Insert Data into Students Table**:\n\n```sqlite\nINSERT INTO Students (StudentID, Name) VALUES\n(1, 'John'),\n(2, 'Alice');\n```\n\n5.  **Insert Data into Courses Table**:\n\n```sqlite\nINSERT INTO Courses (CourseID, CourseName) VALUES\n(1, 'Math'),\n(2, 'Physics'),\n(3, 'Chemistry'),\n(4, 'Biology'),\n(5, 'History');\n```\n\n6.  **Insert Data into StudentCourses Table**:\n\n```sqlite\nINSERT INTO StudentCourses (StudentID, CourseID) VALUES\n(1, 1),  -- John takes Math\n(1, 2),  -- John takes Physics\n(1, 3),  -- John takes Chemistry\n(2, 4),  -- Alice takes Biology\n(2, 5);  -- Alice takes History\n```\n\nThis SQLite code creates the necessary tables and populates them with data in 1NF. Each table has atomic values, and the relationships between students and courses are maintained through the `StudentCourses` table.\n\n---\n\n**Real-World Example**:\n\nConsider an e-commerce platform where each order can contain multiple products. In an unnormalized design, you might store all product names in a single \"Products\" column. By applying 1NF, you would create separate tables for orders and products, linking them with an order_products table. This ensures that each product is stored atomically and that there are no repeating groups.\n\n---\n\n**Interactive Example**:\n\nLet's consider a scenario where you have a table named \"Employees\" with columns like \"EmployeeID\", \"Name\", and \"Skills\". Suppose an employee can have multiple skills, and you are storing these skills as a comma-separated string in the \"Skills\" column.\n\nUnnormalized Data:\n\n| EmployeeID | Name   | Skills             |\n| :--------- | :----- | :----------------- |\n| 1          | John   | Java, Python       |\n| 2          | Alice  | SQL, Database      |\n| 3          | Bob    | C++, Algorithm     |\n\nThe \"Skills\" column contains repeating groups (multiple skills) for each employee, violating 1NF.\n\nTo normalize this data into 1NF, you need to eliminate the repeating group. The strategy is to create a separate table for skills and link it to the \"Employees\" table using a foreign key.\n\n**Steps to Apply 1NF**:\n\n1.  Create a New Table for Skills: Create a new table named \"Skills\" with columns \"SkillID\" and \"SkillName\".\n2.  Link Tables Using Foreign Key: Add a new table named \"EmployeeSkills\" to link \"Employees\" and \"Skills\" tables.\n\nNormalized Data:\n\n**Employees Table**:\n\n| EmployeeID | Name  |\n| :--------- | :---- |\n| 1          | John  |\n| 2          | Alice |\n| 3          | Bob   |\n\n**Skills Table**:\n\n| SkillID | SkillName  |\n| :------ | :--------- |\n| 1       | Java       |\n| 2       | Python     |\n| 3       | SQL        |\n| 4       | Database   |\n| 5       | C++        |\n| 6       | Algorithm  |\n\n**EmployeeSkills Table**:\n\n| EmployeeID | SkillID |\n| :--------- | :------ |\n| 1          | 1       |\n| 1          | 2       |\n| 2          | 3       |\n| 2          | 4       |\n| 3          | 5       |\n| 3          | 6       |\n\nNow, each column contains only atomic values, and there are no repeating groups.\n\n**SQLite Code for 1NF Normalization**:\n\n1.  Create Employees Table:\n\n```sqlite\nCREATE TABLE Employees (\n    EmployeeID INTEGER PRIMARY KEY,\n    Name TEXT\n);\n```\n\n2.  Create Skills Table:\n\n```sqlite\nCREATE TABLE Skills (\n    SkillID INTEGER PRIMARY KEY,\n    SkillName TEXT\n);\n```\n\n3.  Create EmployeeSkills Table:\n\n```sqlite\nCREATE TABLE EmployeeSkills (\n    EmployeeID INTEGER,\n    SkillID INTEGER,\n    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),\n    FOREIGN KEY (SkillID) REFERENCES Skills(SkillID),\n    PRIMARY KEY (EmployeeID, SkillID)\n);\n```\n\n4.  Insert Data into Employees Table:\n\n```sqlite\nINSERT INTO Employees (EmployeeID, Name) VALUES\n(1, 'John'),\n(2, 'Alice'),\n(3, 'Bob');\n```\n\n5.  Insert Data into Skills Table:\n\n```sqlite\nINSERT INTO Skills (SkillID, SkillName) VALUES\n(1, 'Java'),\n(2, 'Python'),\n(3, 'SQL'),\n(4, 'Database'),\n(5, 'C++'),\n(6, 'Algorithm');\n```\n\n6.  Insert Data into EmployeeSkills Table:\n\n```sqlite\nINSERT INTO EmployeeSkills (EmployeeID, SkillID) VALUES\n(1, 1),  -- John has Java\n(1, 2),  -- John has Python\n(2, 3),  -- Alice has SQL\n(2, 4),  -- Alice has Database\n(3, 5),  -- Bob has C++\n(3, 6);  -- Bob has Algorithm\n```\n\nThis SQLite code creates the necessary tables and populates them with data in 1NF. Each table has atomic values, and the relationships between employees and skills are maintained through the EmployeeSkills table.\n\n## Summary\n\nIn this lesson, you've learned about normalization and the importance of First Normal Form (1NF). You discovered how to identify repeating groups and apply 1NF to eliminate them, ensuring each column contains only atomic values. By normalizing your databases, you reduce redundancy, improve data integrity, and enhance overall database performance.\n\nNow that you've mastered 1NF, are you ready to take your data organization skills to the next level? What challenges might you face when dealing with more complex normalization rules?\n\nAdditional Resources for you:\nhttps://www.datacamp.com/tutorial/first-normal-form\n",
  "research_links_docs": [
    "https://www.datacamp.com/tutorial/first-normal-form"
  ],
  "images_links": [],
  "additional_lesson_specific_guidance": "generate a narrative course for 1NF by making it super easy and covering all concepts and give the code in sqlite for the normalization and explain each and every key concepts for what is normalization and why we need that and explain the 1NF.",
  "api_key": ""
}