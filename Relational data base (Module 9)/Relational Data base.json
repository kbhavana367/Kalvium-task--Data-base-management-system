{
  "course_name": "Data model and relational data base",
  "course_outcomes": "The primary objective of this course is to provide a deep understanding of data structures and algorithms, focusing on their practical application to solve real-world problems. Throughout the course, you will explore various data structures and algorithmic techniques, learning how to implement and apply them effectively in different scenarios. By the end of the course, you will have a comprehensive understanding of problem-solving strategies, enabling you to approach complex problems with confidence and efficiency. You will also gain hands-on experience in utilizing data structures and algorithms to optimize solutions for real-world challenges.",
  "current_module_name": "what is Relational Data base ",
  "current_module_description": "A Relational Database Management System (RDBMS) is a software system designed to manage and organize data in a structured, tabular format. It uses tables to store data, with each table consisting of rows and columns, where each row represents a record and each column represents a data attribute. RDBMS ensures data integrity and consistency through rules like primary keys and foreign keys. It also supports the efficient retrieval, updating, and management of large volumes of interrelated data.",
  "current_module_lesson_count": "5",
  "current_module_lesson_index": "1",
  "previous_module_name_with_description": "SQL (Structured Query Language), the standard language used for interacting with relational databases. You'll gain an understanding of how to use SQL to retrieve, manipulate, and manage data in a database. The module covers basic SQL operations, including how to query databases, insert new data, update existing records, and delete unwanted data.",
  "previous_whole_lessons_in_current_module": " Entity-Relationship (ER) Design, which is crucial for effectively modeling and structuring databases. You will explore how to identify entities, define relationships, and establish attributes to create a clear and efficient database schema. By the end of this module, you will have a strong understanding of how to apply ER design principles to visualize and implement real-world data models.",
  "instruction_designer_input": "This lesson introduces a set of advanced concepts, building on what you've already learned in previous lessons. As you dive deeper into the world of relational databases, you’ll explore topics such as database design, normalization, and advanced SQL queries. These concepts naturally extend from the foundational knowledge you’ve gained so far, and this lesson will help you bridge that gap by providing more sophisticated tools for database management.",
  "time_to_read": "20 mins",
  "lu_description": "Understanding Advanced SQl like trigger , stored procedure and tcl.",
  "learner_journey": "The learner will understand the concept of relational data base.",
  "created_lesson": "Ever wondered how websites remember your preferences, or how online stores keep track of their inventory? It all boils down to databases and the language we use to talk to them: SQL. Remember the Entity-Relationship (ER) diagrams we explored? Now, let's translate those diagrams into a working database and learn some advanced techniques to manage data efficiently.\n\n## Learning Objectives\n\nIn this lesson, you'll learn:\n\n*   The basic syntax of **SQL (Structured Query Language)**, the standard language for interacting with databases.\n*   How to use **SQL queries** to retrieve, insert, update, and delete data.\n*   How to use **Joins** to combine data from multiple tables.\n*   Practical examples of SQL queries to solve common data retrieval problems.\n*   How to use **Stored Procedures** to bundle SQL queries for reuse.\n*   How to use **Triggers** to automatically execute SQL queries in response to certain events.\n\n---\n\nImagine you're building a fantastic LEGO city! You have different sets of LEGO bricks: one box for houses, one for cars, and another for people. To build a complete city, you need to organize these bricks and connect them in a meaningful way. That’s where **relational databases** come in.\n\n### Understanding Relational Databases\n\n**What is a Relational Database?**\n\nA **relational database** is like a collection of organized LEGO sets that are linked together. Each set (or **table**) holds specific information, and these sets are related to each other through special connectors (**keys**).\n\n*   Think of each LEGO set as a table: one for houses, one for cars, and one for people.\n*   Each table has its own list of items: houses have doors, windows, and roofs; cars have wheels, engines, and seats; people have names, jobs, and addresses.\n*   These tables are connected so you know which people live in which houses and who drives which cars.\n\n**Why use Relational Databases?**\n\n*   **Organization:** Keeps data neatly organized in tables, like using separate boxes for different types of LEGO bricks.\n*   **Relationships:** Connects data across different tables, making it easy to find related information. Instead of searching through every box, you can quickly find which LEGO person lives in which LEGO house.\n*   **Efficiency:** Makes it faster to retrieve and manage data. Imagine finding a specific LEGO brick in seconds instead of hours.\n\n**Keys: The Connectors**\n\n**Keys** are like special LEGO connectors that link tables together. They help you quickly find related information across different tables. There are two main types:\n\n*   **Primary Key:** A unique identifier for each row in a table. Think of it as each LEGO person having a unique ID number on their LEGO passport. No two people have the same ID, ensuring everyone is easily identifiable.\n*   **Foreign Key:** A reference to the primary key in another table. Think of it as linking a LEGO person's ID to the LEGO house they live in. This way, you know exactly who lives where.\n\n**Example Scenario**\n\nLet’s say you have three tables for your LEGO city:\n\n1.  **People:**\n\n    *   `PersonID` (Primary Key): Unique ID for each LEGO person.\n    *   `Name`: LEGO person's name.\n    *   `Job`: LEGO person's job.\n2.  **Houses:**\n\n    *   `HouseID` (Primary Key): Unique ID for each LEGO house.\n    *   `Address`: LEGO house's address.\n    *   `Color`: LEGO house's color.\n3.  **PersonHouse:**\n\n    *   `PersonID` (Foreign Key): Links to the `People` table.\n    *   `HouseID` (Foreign Key): Links to the `Houses` table.\n\nIn this setup, the `PersonHouse` table connects people to the houses they live in. The `PersonID` and `HouseID` in the `PersonHouse` table are **foreign keys** that reference the **primary keys** in the `People` and `Houses` tables, respectively.\n\n**How It Works**\n\n1.  **People Table:**\n\n    | PersonID | Name      | Job        |\n    | -------- | --------- | ---------- |\n    | 1        | John      | Builder    |\n    | 2        | Jane      | Teacher    |\n2.  **Houses Table:**\n\n    | HouseID | Address     | Color  |\n    | ------- | ----------- | ------ |\n    | 1       | 1 Main St   | Blue   |\n    | 2       | 2 Park Ave  | Red    |\n3.  **PersonHouse Table:**\n\n    | PersonID | HouseID |\n    | -------- | ------- |\n    | 1        | 1       |\n    | 2        | 2       |\n\nThis shows that John (PersonID 1) lives in the blue house at 1 Main St (HouseID 1), and Jane (PersonID 2) lives in the red house at 2 Park Ave (HouseID 2).\n\n**In Summary**\n\n**Relational databases** organize data into tables that are linked through **keys**. **Primary keys** uniquely identify each row in a table, while **foreign keys** create connections between tables. This system allows you to efficiently manage and retrieve related data, just like organizing a LEGO city!\n\nNow that we understand how relational databases use tables and keys to organize information, let's dive into SQL, the language we use to interact with these databases. SQL allows us to create, modify, and query data, making it an essential tool for managing relational databases effectively.\n\n### Introduction to SQL\n\n**SQL (Structured Query Language)** is the standard language for managing and manipulating data in **relational database management systems (RDBMS)**. Think of it as the universal language that databases understand, allowing you to create, modify, and query data.\n\n**RDBMS (Relational Database Management System):** A software system used to maintain relational databases. Examples include MySQL, PostgreSQL, Oracle, and SQL Server.\n\n**Why SQL?**\n\n*   **Standard:** It's the industry standard, supported by almost all **RDBMS**, like MySQL, PostgreSQL, Oracle, and SQL Server.\n*   **Powerful:** SQL can handle complex data manipulations and retrieval tasks.\n*   **Easy to Learn:** The basic syntax is relatively straightforward and human-readable.\n\n### Basic SQL Syntax\n\nSQL commands are instructions you give to the database. The most common commands fall into these categories:\n\n*   **SELECT:** Retrieves data from one or more tables.\n*   **INSERT:** Adds new data into a table.\n*   **UPDATE:** Modifies existing data in a table.\n*   **DELETE:** Removes data from a table.\n\nLet’s start with the SELECT statement. Imagine you want to find all the books written by a specific author. You’d use a SELECT statement.\n\n**SELECT Statement**\n\nThe `SELECT` statement is used to retrieve data from a database. Here's the basic syntax:\n\n```sql\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n```\n\n*   `SELECT column1, column2, ...`: Specifies the columns you want to retrieve. Use `*` to select all columns.\n*   `FROM table_name`: Specifies the table from which you want to retrieve data.\n*   `WHERE condition`: Filters the data based on a specified condition (optional).\n\n**Example:**\n\nLet's say you have a table named `Customers` with columns like `CustomerID`, `Name`, and `City`. To retrieve the names of all customers from New York, you’d use the following query:\n\n```sql\nSELECT Name\nFROM Customers\nWHERE City = 'New York';\n```\n\nThis query tells the database: \"Give me the `Name` from the `Customers` table where the `City` is 'New York'.\"\n\n### INSERT Statement\n\nImagine adding a new book to your library. That's what the INSERT statement does – it adds new rows of data into a table.\n\n```sql\nINSERT INTO table_name (column1, column2, ...)\nVALUES (value1, value2, ...);\n```\n\n*   `INSERT INTO table_name`: Specifies the table into which you want to insert data.\n*   `(column1, column2, ...)`: Specifies the columns you want to populate.\n*   `VALUES (value1, value2, ...)`: Specifies the values you want to insert into the corresponding columns.\n\n**Example:**\n\nTo add a new customer named \"Jane Doe\" from Chicago to the `Customers` table, you’d use the following query:\n\n```sql\nINSERT INTO Customers (Name, City)\nVALUES ('Jane Doe', 'Chicago');\n```\n\nThis query tells the database: \"Insert a new row into the `Customers` table with the `Name` as 'Jane Doe' and the `City` as 'Chicago'.\"\n\n### UPDATE Statement\n\nSometimes, you need to correct or update information. The UPDATE statement lets you modify existing data in a table.\n\n```sql\nUPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;\n```\n\n*   `UPDATE table_name`: Specifies the table you want to update.\n*   `SET column1 = value1, column2 = value2, ...`: Specifies the columns you want to modify and their new values.\n*   `WHERE condition`: Filters the rows you want to update based on a condition (optional, but highly recommended to avoid updating all rows).\n\n**Example:**\n\nTo update the city of customer with `CustomerID` 123 to \"Los Angeles\" in the `Customers` table, you'd use:\n\n```sql\nUPDATE Customers\nSET City = 'Los Angeles'\nWHERE CustomerID = 123;\n```\n\nThis query tells the database: \"In the `Customers` table, change the `City` to 'Los Angeles' for the row where the `CustomerID` is 123.\"\n\n### DELETE Statement\n\nFinally, if you need to remove data, the DELETE statement is your tool.\n\n```sql\nDELETE FROM table_name\nWHERE condition;\n```\n\n*   `DELETE FROM table_name`: Specifies the table from which you want to delete data.\n*   `WHERE condition`: Filters the rows you want to delete based on a condition (optional, but crucial to prevent accidental deletion of all rows).\n\n**Example:**\n\nTo delete the customer with `CustomerID` 123 from the `Customers` table, you’d use:\n\n```sql\nDELETE FROM Customers\nWHERE CustomerID = 123;\n```\n\nThis query tells the database: \"Remove the row from the `Customers` table where the `CustomerID` is 123.\"\n\n---\n\nNow that you've learned how to use SQL to manipulate data within a single table, let's explore how to combine data from multiple tables. This is essential when you need to retrieve information that is spread across different tables, like connecting customers to their orders.\n\n### Joins: Combining Data from Multiple Tables\n\n**Joins** are used to combine rows from two or more tables based on a related column. This is crucial when your data is spread across multiple tables. There are several types of joins, but let's focus on the most common one: the INNER JOIN.\n\n**INNER JOIN**\n\nAn `INNER JOIN` returns only the rows that have matching values in both tables. Think of it as finding the intersection between two sets.\n\n```sql\nSELECT column1, column2, ...\nFROM table1\nINNER JOIN table2\nON table1.common_column = table2.common_column;\n```\n\n*   `FROM table1 INNER JOIN table2`: Specifies the tables you want to join.\n*   `ON table1.common_column = table2.common_column`: Specifies the column(s) that the tables have in common and uses to match rows.\n\n**Example:**\n\nLet's say you have two tables: `Customers` (with columns `CustomerID`, `Name`) and `Orders` (with columns `OrderID`, `CustomerID`, `OrderDate`). To retrieve the names of customers along with their order dates, you’d use the following query:\n\n```sql\nSELECT Customers.Name, Orders.OrderDate\nFROM Customers\nINNER JOIN Orders\nON Customers.CustomerID = Orders.CustomerID;\n```\n\nThis query tells the database: \"Combine the `Customers` and `Orders` tables where the `CustomerID` in both tables matches. Then, give me the `Name` from the `Customers` table and the `OrderDate` from the `Orders` table.\"\n\nThis is how you can retrieve related data from multiple tables, providing a more complete view of your information.\n\nNow that you know how to combine data from multiple tables, let's explore ways to automate tasks and reuse queries using **Stored Procedures** and **Triggers**.\n\n### Stored Procedures: Bundling SQL Queries\n\nImagine you frequently perform the same set of SQL queries, like generating a report of monthly sales. Instead of writing the same queries over and over, you can bundle them into a **Stored Procedure**.\n\n**What is a Stored Procedure?**\n\nA **Stored Procedure** is a precompiled set of SQL statements stored in the database. Think of it as a mini-program you can run within your database.\n\n**Why use Stored Procedures?**\n\n*   **Reusability:** Execute the same set of queries multiple times without rewriting them.\n*   **Efficiency:** Stored procedures are precompiled, which means they run faster.\n*   **Security:** They can help protect your data by controlling access to the underlying tables.\n\n**Example:**\n\nLet’s create a stored procedure to retrieve the total number of orders for a specific customer.\n\n```sql\n-- Creating a Stored Procedure\nCREATE PROCEDURE GetCustomerOrderCount (@CustomerID INT)\nAS\nBEGIN\n    SELECT COUNT(*) AS TotalOrders\n    FROM Orders\n    WHERE CustomerID = @CustomerID;\nEND;\n\n-- Executing the Stored Procedure\nEXEC GetCustomerOrderCount 123;\n```\n\nIn this example, `CREATE PROCEDURE` defines the stored procedure named `GetCustomerOrderCount`. It takes `@CustomerID` as an input parameter. The `BEGIN` and `END` keywords enclose the SQL query that counts the number of orders for the given customer. To execute the stored procedure, you use the `EXEC` command followed by the stored procedure's name and any required parameters.\n\nThis is how you can create and execute a stored procedure to simplify and reuse SQL queries. Next, let's delve into **Triggers** and see how they can automate database operations based on certain events.\n\n### Triggers: Automating Database Operations\n\n**Triggers** are special types of stored procedures that automatically execute in response to certain events on a table. Think of them as automatic alarms that go off when something specific happens in your database.\n\n**What is a Trigger?**\n\nA **Trigger** is a SQL procedure that automatically starts when certain events occur on a table. These events can include `INSERT`, `UPDATE`, or `DELETE` operations.\n\n**Why use Triggers?**\n\n*   **Automation:** Automatically perform tasks based on database events.\n*   **Data Integrity:** Enforce rules and constraints to maintain data accuracy.\n*   **Auditing:** Track changes to data for auditing purposes.\n\n**Example:**\n\nLet's create a trigger that automatically logs any updates made to the `Customers` table.\n\n```sql\n-- Creating a Trigger\nCREATE TRIGGER Customers_Audit\nON Customers\nAFTER UPDATE\nAS\nBEGIN\n    INSERT INTO CustomersAudit (CustomerID, Name, City, UpdatedDate)\n    SELECT CustomerID, Name, City, GETDATE()\n    FROM DELETED;\nEND;\n```\n\nIn this example, `CREATE TRIGGER` defines a trigger named `Customers_Audit` that activates after an `UPDATE` operation on the `Customers` table. The `INSERT INTO` statement adds a new record to the `CustomersAudit` table, capturing the old values of the updated row from the `DELETED` table. The `GETDATE()` function provides the current date and time of the update.\n\nThis is how triggers can be used to automate tasks like auditing and maintaining data integrity. By using triggers, you ensure that specific actions are performed automatically whenever certain events occur in your database.\n\n---\n\n### Real-World Examples\n\n1.  **E-commerce:** Retrieving customer order history\n\n    Let’s consider an e-commerce platform where you need to retrieve a customer's order history. Using the `Customers` and `Orders` tables, you can use an `INNER JOIN` to combine customer information with their corresponding orders.\n\n    ```sql\n    SELECT Customers.Name, Orders.OrderID, Orders.OrderDate\n    FROM Customers\n    INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID\n    WHERE Customers.CustomerID = 456;\n    ```\n\n    This query efficiently retrieves the customer’s name, order ID, and order date for customer ID 456.\n\n2.  **Social Media:** Retrieving user posts\n\n    In a social media application, you might have tables for `Users` and `Posts`. To get all the posts made by a specific user, you can use a similar `INNER JOIN` query:\n\n    ```sql\n    SELECT Users.Username, Posts.PostContent, Posts.PostDate\n    FROM Users\n    INNER JOIN Posts ON Users.UserID = Posts.UserID\n    WHERE Users.UserID = 789;\n    ```\n\n    This query retrieves the username, post content, and post date for all posts made by user ID 789.\n\n3. **Inventory Management:** Automating stock updates\n\n    Let’s say you want to automatically update the stock level in your inventory whenever an order is placed. You can use a trigger to achieve this.\n\n    ```sql\n    CREATE TRIGGER UpdateStock\n    ON OrderDetails\n    AFTER INSERT\n    AS\n    BEGIN\n        UPDATE Products\n        SET StockLevel = StockLevel - (SELECT Quantity FROM INSERTED WHERE ProductID = Products.ProductID)\n        WHERE ProductID IN (SELECT ProductID FROM INSERTED);\n    END;\n    ```\n\n    This trigger reduces the `StockLevel` in the `Products` table whenever a new order is inserted into the `OrderDetails` table, ensuring that your inventory is always up-to-date.\n\n### Summary\n\nIn this lesson, you've learned the fundamental **SQL** commands (`SELECT`, `INSERT`, `UPDATE`, `DELETE`), how to use **joins** to combine data from multiple tables, and advanced concepts like **Stored Procedures** and **Triggers** to automate and simplify database operations. These are essential skills for anyone working with databases.\n\nAdditional Resources for you:\n\n*   [https://youtu.be/0OQJDd3QqQM?feature=shared](https://youtu.be/0OQJDd3QqQM?feature=shared)\n\nNow that you understand the basics of SQL, how would you use these skills to solve a more complex data retrieval problem, such as finding the top-selling products in a specific category, and how could you automate processes like auditing or updating inventory levels?\n",
  "research_links_docs": [
    "https://en.wikipedia.org/wiki/Relational_database"
  ],
  "images_links": [],
  "additional_lesson_specific_guidance": "Create a narrative way of what is relational data base a intro of how rdbms works",
  "api_key": ""
}